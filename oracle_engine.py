from collections import Counter
import random

class OracleEngine:
    def __init__(self):
        self.history = []
        self.memory_failed_patterns = set()

    # --- ‡∏™‡πà‡∏ß‡∏ô Data Management (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Engine ‡πÄ‡∏≠‡∏á) ---
    def update_history(self, result):
        if result in ['P', 'B', 'T']:
            self.history.append(result)

    def remove_last(self):
        if self.history:
            self.history.pop()

    def reset_history(self):
        self.history = []
        self.memory_failed_patterns = set()

    # --- 1. üß¨ DNA Pattern Analysis (‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö) ---
    def detect_patterns(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô Pingpong, Two-Cut, Dragon, Broken Pattern, Triple Cut"""
        patterns = []
        h = self.history

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Pingpong (B-P-B-P ‡∏´‡∏£‡∏∑‡∏≠ P-B-P-B)
        if len(h) >= 4:
            last4 = h[-4:]
            if (last4 == ['B','P','B','P'] or last4 == ['P','B','P','B']):
                patterns.append('Pingpong')
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Two-Cut (BB-PP ‡∏´‡∏£‡∏∑‡∏≠ PP-BB)
        if len(h) >= 4:
            last4 = h[-4:]
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ 2 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô 2 ‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡∏∞ 2 ‡∏Ñ‡∏π‡πà‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
            if last4[0] == last4[1] and last4[2] == last4[3] and last4[0] != last4[2]:
                patterns.append('Two-Cut')

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Dragon (long streak: 3 ‡∏ñ‡∏∂‡∏á 6 ‡∏ï‡∏±‡∏ß‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô)
        for i in range(3, 7): 
            if len(h) >= i:
                if len(set(h[-i:])) == 1: # ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ i ‡∏ï‡∏±‡∏ß‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏´‡∏°‡∏î
                    patterns.append(f'Dragon ({i})') # ‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á Dragon ‡∏î‡πâ‡∏ß‡∏¢

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Triple Cut (‡∏ï‡∏±‡∏î 3) ‡πÄ‡∏ä‡πà‡∏ô PPPBBB ‡∏´‡∏£‡∏∑‡∏≠ BBBPPP
        if len(h) >= 6:
            last6 = h[-6:]
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ 3 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡∏∞ 3 ‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡∏∞ 3 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å 3 ‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏á
            if (last6[0] == last6[1] == last6[2] and 
                last6[3] == last6[4] == last6[5] and 
                last6[0] != last6[3]):
                patterns.append('Triple Cut')

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Broken Pattern (BPBPPBP) - ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£ Implement
        # **Note:** ‡∏•‡∏≠‡∏à‡∏¥‡∏Å‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏´‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á
        if len(h) >= 7:
            last7 = "".join(h[-7:])
            if "BPBPPBP" in last7 or "PBPBBBP" in last7: 
                patterns.append('Broken Pattern')

        return patterns

    # --- 2. üöÄ Momentum Tracker (‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏£‡∏á‡πÄ‡∏´‡∏ß‡∏µ‡πà‡∏¢‡∏á) ---
    def detect_momentum(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏£‡∏á‡πÄ‡∏´‡∏ß‡∏µ‡πà‡∏¢‡∏á ‡πÄ‡∏ä‡πà‡∏ô B3+, P3+, Steady Repeat"""
        momentum = []
        h = self.history
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Momentum (3 ‡∏ï‡∏±‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô)
        if len(h) >= 3:
            last_char = h[-1]
            streak_count = 0
            # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î
            for i in reversed(range(len(h))):
                if h[i] == last_char:
                    streak_count += 1
                else:
                    break
            if streak_count >= 3:
                momentum.append(f"{last_char}{streak_count}+ Momentum")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Steady Repeat (PBPBPBP ‡∏´‡∏£‡∏∑‡∏≠ BPBPBPB)
        if len(h) >= 7:
            seq = h[-7:]
            if (seq == ['P','B','P','B','P','B','P'] or 
                seq == ['B','P','B','P','B','P','B']):
                momentum.append("Steady Repeat Momentum")

        return momentum
    
    # --- 3. ‚ö†Ô∏è Trap Zone Detection (‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÇ‡∏ã‡∏ô‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢) ---
    def in_trap_zone(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢"""
        h = self.history
        if len(h) < 2:
            return False
        
        # P1-B1, B1-P1 (‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£)
        last2 = h[-2:]
        if tuple(last2) in [('P','B'), ('B','P')]:
            return True

        # B3-P1 ‡∏´‡∏£‡∏∑‡∏≠ P3-B1 (‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏±‡∏ß) - 3 ‡∏ï‡∏±‡∏ß‡∏ï‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏±‡∏î
        if len(h) >= 4:
            if (len(set(h[-4:-1])) == 1 and h[-4] != h[-1]):
                return True
        return False

    # --- 4. üéØ Confidence Engine (‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à 0-100%) ---
    def confidence_score(self):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢"""
        if not self.history or len(self.history) < 10: 
            return 0
        
        patterns = self.detect_patterns()
        momentum = self.detect_momentum()
        trap = self.in_trap_zone()
        
        score = 50

        if patterns:
            score += len(patterns) * 10 
        
        if momentum:
            score += len(momentum) * 8
        
        if trap:
            score -= 60 
        
        if score < 0:
            score = 0
        if score > 100:
            score = 100
        
        return score

    # --- 5. üîÅ Memory Logic (‡∏à‡∏î‡∏à‡∏≥ Pattern ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏û‡∏•‡∏≤‡∏î) ---
    def update_failed_pattern(self, pattern_name):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° pattern ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ó‡∏≤‡∏¢‡∏ú‡∏¥‡∏î‡∏•‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥"""
        self.memory_failed_patterns.add(pattern_name)

    def is_pattern_failed(self, pattern_name):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ pattern ‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ó‡∏≤‡∏¢‡∏ú‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return pattern_name in self.memory_failed_patterns

    # --- 6. üß† Intuition Logic (‡∏•‡∏≠‡∏à‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ Pattern ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô) ---
    def intuition_predict(self):
        """‡πÉ‡∏ä‡πâ‡∏•‡∏≠‡∏à‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ Pattern ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"""
        h = self.history
        if len(h) < 3:
            return '?'

        last3 = h[-3:]
        last4 = h[-4:] if len(h) >= 4 else None
        
        if 'T' in last3 and last3.count('T') == 1 and last3[0] != last3[1] and last3[1] != last3[2]:
            return 'T'
        if last4 and Counter(last4)['T'] >= 2:
            return 'T'
        
        if last3 == ['P','B','P']:
            return 'P'
        if last3 == ['B','B','P']:
            return 'P'
        if last3 == ['P','P','B']:
            return 'B'
        if len(h) >= 5 and h[-5:] == ['B','P','B','P','P']:
             return 'B'

        return '?'

    # --- 7. üî¨ Backtest Simulation (‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á) ---
    def backtest_accuracy(self):
        """
        ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏•‡∏≠‡∏à‡∏¥‡∏Å‡∏à‡∏£‡∏¥‡∏á)
        ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Drawdown
        """
        if len(self.history) < 20:
            return 0
        
        # TODO: Implement ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÜ
        return random.randint(60, 90) # ‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 60-90% (‡∏Ñ‡πà‡∏≤ dummy)

    def backtest_drawdown_exceeded(self):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Drawdown (miss ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô) ‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏•‡∏≠‡∏à‡∏¥‡∏Å‡∏à‡∏£‡∏¥‡∏á)
        """
        # TODO: Implement ‡∏•‡∏≠‡∏à‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Drawdown ‡∏à‡∏£‡∏¥‡∏á‡πÜ
        return False # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô (‡∏Ñ‡πà‡∏≤ dummy)

    # --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ---
    def predict_next(self):
        """
        ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô dictionary ‡∏ó‡∏µ‡πà‡∏°‡∏µ prediction, risk, recommendation, developer_view
        """
        prediction_result = '?'
        risk_level = "Normal"
        recommendation = "Play ‚úÖ"
        developer_view = ""

        # --- 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Trap Zone ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏™‡∏∏‡∏î (‡∏á‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ) ---
        if self.in_trap_zone():
            risk_level = "Trap"
            recommendation = "Avoid ‚ùå"
            developer_view = "Trap Zone detected: High volatility, recommending avoidance."
            return {
                "developer_view": developer_view,
                "prediction": prediction_result,
                "accuracy": self.backtest_accuracy(),
                "risk": risk_level,
                "recommendation": recommendation
            }

        # --- 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Confidence Score (‡∏á‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏´‡∏≤‡∏Å‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå) ---
        score = self.confidence_score()
        if score < 60:
            recommendation = "Avoid ‚ùå"
            developer_view = f"Confidence Score ({score}%) is below threshold (60%), recommending avoidance."
            return {
                "developer_view": developer_view,
                "prediction": prediction_result,
                "accuracy": self.backtest_accuracy(),
                "risk": "Low Confidence",
                "recommendation": recommendation
            }
        
        # --- 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Drawdown (‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô 3 miss ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏á‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô) ---
        if self.backtest_drawdown_exceeded(): 
            risk_level = "High Drawdown"
            recommendation = "Avoid ‚ùå"
            developer_view = "Drawdown exceeded 3 consecutive misses, recommending avoidance."
            return {
                "developer_view": developer_view,
                "prediction": prediction_result,
                "accuracy": self.backtest_accuracy(),
                "risk": risk_level,
                "recommendation": recommendation
            }

        # --- 4. ‡πÉ‡∏ä‡πâ Pattern ‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡∏´‡∏≤‡∏Å‡∏°‡∏µ) ---
        patterns = self.detect_patterns()
        momentum = self.detect_momentum() 
        
        if patterns:
            developer_view_patterns_list = []
            for pat_name in patterns:
                developer_view_patterns_list.append(pat_name)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Memory Logic: ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ pattern ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏û‡∏•‡∏≤‡∏î
                if self.is_pattern_failed(pat_name):
                    developer_view += f" (Note: Pattern '{pat_name}' previously failed. Skipping.)"
                    continue
                
                # ‡∏•‡∏≠‡∏à‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏≤‡∏° Pattern ‡∏ó‡∏µ‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
                if 'Dragon' in pat_name: 
                    prediction_result = self.history[-1]
                    developer_view = f"DNA Pattern: {pat_name} detected. Predicting last result."
                    break
                elif pat_name == 'Pingpong':
                    last = self.history[-1]
                    prediction_result = 'P' if last == 'B' else 'B'
                    developer_view = f"DNA Pattern: Pingpong detected. Predicting opposite of last."
                    break
                elif pat_name == 'Two-Cut':
                    if len(self.history) >= 2:
                        last_two = self.history[-2:]
                        if last_two[0] == last_two[1]:
                            prediction_result = 'P' if last_two[0] == 'B' else 'B'
                            developer_view = f"DNA Pattern: Two-Cut detected. Predicting opposite of current pair."
                            break
                elif pat_name == 'Triple Cut': # NEW: Logic for Triple Cut
                    if len(self.history) >= 3:
                        last_three = self.history[-3:]
                        if len(set(last_three)) == 1: # E.g., PPP
                            # Predict the opposite of the current triple
                            prediction_result = 'P' if last_three[0] == 'B' else 'B'
                            developer_view = f"DNA Pattern: Triple Cut detected. Predicting opposite of last three."
                            break
            
            if developer_view_patterns_list and not developer_view:
                developer_view += f"Detected patterns: {', '.join(developer_view_patterns_list)}."
            elif developer_view_patterns_list:
                developer_view += f" | Other patterns: {', '.join(developer_view_patterns_list)}."
                
        # --- 5. Intuition Logic (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ Pattern ‡∏´‡∏•‡∏±‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ Pattern ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡πÄ‡∏Ñ‡∏¢‡∏û‡∏•‡∏≤‡∏î) ---
        if prediction_result == '?': # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡∏≤‡∏Å Pattern ‡∏´‡∏•‡∏±‡∏Å
            intuitive_guess = self.intuition_predict()
            
            if intuitive_guess == 'T':
                prediction_result = 'T'
                developer_view += " (Intuition Logic: Specific Tie pattern identified.)"
            elif intuitive_guess in ['P', 'B']:
                prediction_result = intuitive_guess
                developer_view += f" (Intuition Logic: Predicting {intuitive_guess} based on subtle patterns.)"
            else:
                recommendation = "Avoid ‚ùå"
                risk_level = "Uncertainty"
                developer_view += " (Intuition Logic: No strong P/B/T prediction, recommending Avoid.)"
                prediction_result = '?'

        # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏° Developer View ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å Momentum
        if momentum:
            if developer_view: developer_view += " | "
            developer_view += f"Momentum: {', '.join(momentum)}."
        
        # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
        if not developer_view and prediction_result == '?':
            developer_view = "No strong patterns or intuition detected."

        return {
            "developer_view": developer_view,
            "prediction": prediction_result,
            "accuracy": self.backtest_accuracy(), 
            "risk": risk_level,
            "recommendation": recommendation
        }

    # Helper function for Streamlit App
    def get_history_emojis(self):
        """‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô emoji ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"""
        emoji_map = {'P': 'üîµ', 'B': 'üî¥', 'T': 'üü¢'}
        return [emoji_map.get(r, '?') for r in self.history]

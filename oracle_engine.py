from collections import Counter

class OracleEngine:
    def __init__(self):
        self.history = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á ['P','B','T',...]
        self.memory_failed_patterns = set()  # ‡πÄ‡∏Å‡πá‡∏ö pattern ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏û‡∏•‡∏≤‡∏î

    # ----------------------------------------------------
    # ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Data Management (‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Streamlit App ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÅ‡∏•‡πâ‡∏ß)
    def update_history(self, result):
        if result in ['P', 'B', 'T']:
            self.history.append(result)

    def remove_last(self):
        if self.history:
            self.history.pop()

    def reset_history(self):
        self.history = []
        self.memory_failed_patterns = set()
    # ----------------------------------------------------

    # 1. üß¨ DNA Pattern Analysis (detect pattern loops)
    def detect_patterns(self):
        patterns = []
        h = self.history

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Pingpong (B-P-B-P)
        if len(h) >= 4:
            last4 = h[-4:]
            if (last4 == ['B','P','B','P'] or last4 == ['P','B','P','B']):
                patterns.append('Pingpong')
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Two-Cut (BB-PP-BB-PP)
        if len(h) >= 4:
            last4 = h[-4:]
            if last4[0] == last4[1] and last4[2] == last4[3] and last4[0] != last4[2]:
                patterns.append('Two-Cut')

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Dragon (long streak)
        for i in range(3, 7):  # check 3 to 6 same in a row
            if len(h) >= i:
                if len(set(h[-i:])) == 1:
                    patterns.append(f'Dragon{i}') # ‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á Dragon ‡∏î‡πâ‡∏ß‡∏¢

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Broken Pattern (BPBPPBP) - ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£ Implement
        # ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        if len(h) >= 7:
            last7 = "".join(h[-7:])
            if "BPBPPBP" in last7 or "PBPBBBP" in last7: # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ regex ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
                patterns.append('Broken Pattern')

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏õ‡∏ï‡πà‡∏≤‡∏á‡πÜ (‡∏¢‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏•‡∏≠‡∏à‡∏¥‡∏Å)
        # ‡πÄ‡∏ä‡πà‡∏ô self.analyze_loop_stability(h)

        return patterns

    # 2. üöÄ Momentum Tracker
    def detect_momentum(self):
        momentum = []
        h = self.history
        
        # Check if last 3+ are same (Momentum)
        if len(h) >= 3:
            last_streak_char = h[-1]
            streak_count = 0
            for i in reversed(range(len(h))):
                if h[i] == last_streak_char:
                    streak_count += 1
                else:
                    break
            if streak_count >= 3:
                momentum.append(f"{last_streak_char}{streak_count}+ Momentum")

        # Check Steady Repeat (e.g. PBPBPBP)
        if len(h) >= 7:
            seq = h[-7:]
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PBPBPBP ‡∏´‡∏£‡∏∑‡∏≠ BPBPBPB
            if (seq == ['P','B','P','B','P','B','P'] or 
                seq == ['B','P','B','P','B','P','B']):
                momentum.append("Steady Repeat Momentum")

        # Ladder Momentum (‡∏¢‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏•‡∏≠‡∏à‡∏¥‡∏Å‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå)
        # ‡πÄ‡∏ä‡πà‡∏ô BB-P-BBB-P-BBBB
        # if len(h) >= X and self._is_ladder_pattern(h[-X:]):
        #     momentum.append("Ladder Momentum")

        return momentum
    
    # Helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ladder Momentum (‡∏ï‡πâ‡∏≠‡∏á implement ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)
    # def _is_ladder_pattern(self, seq):
    #     # ‡∏•‡∏≠‡∏à‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Ladder Momentum
    #     pass

    # 3. ‚ö†Ô∏è Trap Zone Detection
    def in_trap_zone(self):
        h = self.history
        if len(h) < 2:
            return False
        
        # P1-B1, B1-P1 (‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£)
        last2 = h[-2:]
        if tuple(last2) in [('P','B'), ('B','P')]:
            return True
        
        # B3-P1 ‡∏´‡∏£‡∏∑‡∏≠ P3-B1 (‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏±‡∏ß)
        if len(h) >= 4:
            last4 = h[-4:]
            if (last4[-1] == 'P' and last4[-2] != 'P' and last4[-3] == 'P' and last4[-4] == 'P') or \
               (last4[-1] == 'B' and last4[-2] != 'B' and last4[-3] == 'B' and last4[-4] == 'B'):
               # Logic for B3-P1 / P3-B1 (B B B P or P P P B)
               # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 3 ‡∏ï‡∏±‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏•‡∏∞‡∏ï‡∏±‡∏ß
               if len(set(h[-4:-1])) == 1 and h[-4] != h[-1]:
                   return True
        return False

    # 4. üéØ Confidence Engine (0-100%)
    def confidence_score(self):
        # ‡∏ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏°‡πà‡∏û‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ Tie ‡πÄ‡∏¢‡∏≠‡∏∞‡∏°‡∏≤‡∏Å ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ Confidence ‡∏ï‡πà‡∏≥
        if not self.history or len(self.history) < 10: # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏õ‡πá‡∏ô 10 ‡∏ï‡∏≤
            return 0
        
        patterns = self.detect_patterns()
        momentum = self.detect_momentum()
        trap = self.in_trap_zone()
        
        score = 50 # Base score

        if patterns:
            # ‡∏¢‡∏¥‡πà‡∏á‡∏°‡∏µ pattern ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö ‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° Confidence
            score += len(patterns) * 10 
        
        if momentum:
            # ‡∏¢‡∏¥‡πà‡∏á‡∏°‡∏µ momentum ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£ ‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° Confidence
            score += len(momentum) * 8
        
        # ‡∏´‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Trap Zone ‡∏•‡∏î Confidence ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á
        if trap:
            score -= 60 # ‡∏•‡∏î‡πÄ‡∏¢‡∏≠‡∏∞‡πÜ ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ < 60% ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ Avoid
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏°‡∏≤‡∏ï‡∏•‡∏≠‡∏î)
        # ‡∏ñ‡πâ‡∏≤‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏±‡∏ô‡∏ö‡πà‡∏≠‡∏¢‡πÜ (P,B,P,B,P,B) ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏•‡∏î Confidence ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Pingpong
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏≠‡∏à‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏õ (‡∏à‡∏≤‡∏Å DNA Pattern Analysis)

        # Ensure score is within 0-100 range
        if score < 0:
            score = 0
        if score > 100:
            score = 100
        
        return score

    # 5. üîÅ Memory Logic: ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ pattern ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏û‡∏•‡∏≤‡∏î
    def update_failed_pattern(self, pattern_name):
        self.memory_failed_patterns.add(pattern_name)

    def is_pattern_failed(self, pattern_name):
        return pattern_name in self.memory_failed_patterns

    # 6. üß† Intuition Logic (fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ T ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à)
    def intuition_predict(self):
        h = self.history
        if len(h) < 3:
            return '?' # ‡πÑ‡∏°‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏û‡∏≠‡∏à‡∏∞‡∏ó‡∏≤‡∏¢ P/B/T

        last3 = h[-3:]
        last4 = h[-4:] if len(h) >= 4 else None
        
        # ‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ Tie ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à (‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á)
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏µ Tie ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÅ‡∏•‡∏∞ pattern ‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà Tie
        if 'T' in last3 and last3[0] != last3[1] and last3[1] != last3[2]: # ‡πÄ‡∏ä‡πà‡∏ô P-T-B
            return 'T'
        if last4 and Counter(last4)['T'] >= 2: # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ T ‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÉ‡∏ô‡∏™‡∏µ‡πà‡∏ï‡∏≤‡∏´‡∏•‡∏±‡∏á
            return 'T'
        
        # ‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ P/B ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ Pattern ‡∏´‡∏•‡∏±‡∏Å‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
        if last3 == ['P','B','P']:
            return 'P' # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà P
        if last3 == ['B','B','P']:
            return 'P' # BBP ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô P
        if last3 == ['P','P','B']:
            return 'B' # PPB ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô B
        if last3 == ['B','P','P']: # BPP, ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏õ‡πá‡∏ô B (Repeat Cut)
             return 'B'

        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏é‡πÑ‡∏´‡∏ô‡∏ï‡∏£‡∏á ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ '?' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ
        return '?'

    # 7. üî¨ Backtest Simulation (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô Simplified, ‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏á)
    # ‡∏Ñ‡∏ß‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ó‡∏µ‡πà simulate ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÜ
    def backtest_accuracy(self):
        # ‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ï‡πá‡∏°:
        # - ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡∏≤‡∏ó‡∏µ‡πà 11 ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        # - ‡πÉ‡∏ä‡πâ logic ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö (predict_next) ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≤
        # - ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Hit/Miss
        # - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Drawdown (miss ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô)
        
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ dummy
        if len(self.history) < 20:
            return 0
        
        # ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤ dummy, ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≠‡∏à‡∏¥‡∏Å Backtest
        # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì accuracy ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÇ‡∏î‡∏¢‡∏£‡∏±‡∏ô predict_next ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
        # ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï memory_failed_patterns ‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á backtest ‡∏î‡πâ‡∏ß‡∏¢
        
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        recent_hits = 0
        for i in range(max(0, len(self.history) - 15), len(self.history) - 1): # ‡∏î‡∏π 15 ‡∏ï‡∏≤‡∏´‡∏•‡∏±‡∏á
            # ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏ß‡πà‡∏≤
            # ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á engine ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á history ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏∏‡∏î
            # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ predict_next ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô
            pass # ‡∏•‡∏≠‡∏à‡∏¥‡∏Å‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        
        # ‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        import random
        return random.randint(60, 90) # ‡∏™‡∏°‡∏°‡∏ï‡∏¥ Accuracy ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 60-90%

    # helper function for Streamlit App
    def get_history_emojis(self):
        emoji_map = {'P': 'üîµ', 'B': 'üî¥', 'T': 'üü¢'}
        return [emoji_map.get(r, '?') for r in self.history]

    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
    def predict_next(self):
        prediction_result = '?' # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        risk_level = "Normal"
        recommendation = "Play ‚úÖ"
        developer_view = ""

        # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Trap Zone ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏™‡∏∏‡∏î (‡∏á‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)
        if self.in_trap_zone():
            risk_level = "Trap"
            recommendation = "Avoid ‚ùå"
            developer_view = "Trap Zone detected: High volatility, recommending avoidance."
            return {
                "developer_view": developer_view,
                "prediction": prediction_result, # ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô '?'
                "accuracy": self.backtest_accuracy(),
                "risk": risk_level,
                "recommendation": recommendation
            }

        # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Confidence Score (‡∏á‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏´‡∏≤‡∏Å‡∏ï‡πà‡∏≥)
        score = self.confidence_score()
        if score < 60:
            recommendation = "Avoid ‚ùå"
            developer_view = f"Confidence Score ({score}%) is below threshold (60%), recommending avoidance."
            return {
                "developer_view": developer_view,
                "prediction": prediction_result, # ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô '?'
                "accuracy": self.backtest_accuracy(),
                "risk": "Low Confidence",
                "recommendation": recommendation
            }
        
        # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Drawdown (‡∏¢‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á implement Backtest ‡∏à‡∏£‡∏¥‡∏á)
        # if self.backtest_drawdown_exceeded(): # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ô‡∏µ‡πâ
        #     risk_level = "High Drawdown"
        #     recommendation = "Avoid ‚ùå"
        #     developer_view = "Drawdown exceeded 3 consecutive misses, recommending avoidance."
        #     return {
        #         "developer_view": developer_view,
        #         "prediction": prediction_result,
        #         "accuracy": self.backtest_accuracy(),
        #         "risk": risk_level,
        #         "recommendation": recommendation
        #     }


        # 4. ‡πÉ‡∏ä‡πâ Pattern ‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡∏´‡∏≤‡∏Å‡∏°‡∏µ)
        patterns = self.detect_patterns()
        momentum = self.detect_momentum() # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö momentum ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô developer view
        
        if patterns:
            developer_view_patterns = []
            for pat_name in patterns:
                developer_view_patterns.append(pat_name)
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Memory Logic: ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ pattern ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏û‡∏•‡∏≤‡∏î
                if self.is_pattern_failed(pat_name):
                    # ‡∏ñ‡πâ‡∏≤ Pattern ‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡πÉ‡∏ä‡πâ Intuition ‡∏´‡∏£‡∏∑‡∏≠ Avoid ‡πÅ‡∏ó‡∏ô
                    developer_view += f" (Note: Pattern '{pat_name}' previously failed. Skipping.)"
                    continue # ‡∏•‡∏≠‡∏á‡∏î‡∏π pattern ‡∏≠‡∏∑‡πà‡∏ô
                
                # ‡∏•‡∏≠‡∏à‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏≤‡∏° Pattern
                if 'Dragon' in pat_name: # ‡πÉ‡∏ä‡πâ 'Dragon' in pat_name ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö Dragon3, Dragon4
                    prediction_result = self.history[-1] # ‡∏ï‡∏≤‡∏°‡∏°‡∏±‡∏á‡∏Å‡∏£
                    developer_view = f"DNA Pattern: {pat_name} detected. Predicting last result."
                    break # ‡πÄ‡∏à‡∏≠ pattern ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ
                elif pat_name == 'Pingpong':
                    last = self.history[-1]
                    prediction_result = 'P' if last == 'B' else 'B' # ‡∏™‡∏•‡∏±‡∏ö‡∏ù‡∏±‡πà‡∏á
                    developer_view = f"DNA Pattern: Pingpong detected. Predicting opposite of last."
                    break
                elif pat_name == 'Two-Cut':
                    # Two-Cut (BB-PP) ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ PPB ‡∏´‡∏£‡∏∑‡∏≠ BBP ‡πÉ‡∏´‡πâ‡∏ó‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î
                    if len(self.history) >= 2:
                        last_two = self.history[-2:]
                        if last_two[0] == last_two[1]: # ‡∏ñ‡πâ‡∏≤ 2 ‡∏ï‡∏±‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô (‡πÄ‡∏ä‡πà‡∏ô BB, PP)
                            prediction_result = 'P' if last_two[0] == 'B' else 'B' # ‡∏ó‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
                            developer_view = f"DNA Pattern: Two-Cut detected. Predicting opposite of current pair."
                            break
            
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ patterns ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ prediction_result (‡∏≠‡∏≤‡∏à‡πÄ‡∏û‡∏£‡∏≤‡∏∞ pattern ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡πÄ‡∏Ñ‡∏¢‡∏û‡∏•‡∏≤‡∏î)
            if prediction_result == '?' and developer_view_patterns:
                developer_view += f" Detected patterns: {', '.join(developer_view_patterns)}."
                
        # 5. Intuition Logic (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ Pattern ‡∏´‡∏•‡∏±‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ Pattern ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡πÄ‡∏Ñ‡∏¢‡∏û‡∏•‡∏≤‡∏î)
        if prediction_result == '?': # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡∏≤‡∏Å Pattern ‡∏´‡∏•‡∏±‡∏Å
            intuitive_guess = self.intuition_predict()
            if intuitive_guess == 'T': # Intuition ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ T ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à
                prediction_result = 'T'
                developer_view += " (Intuition Logic: Specific Tie pattern identified.)"
            elif intuitive_guess in ['P', 'B']:
                prediction_result = intuitive_guess
                developer_view += f" (Intuition Logic: Predicting {intuitive_guess} based on subtle patterns.)"
            else: # Intuition ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ P/B/T ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
                recommendation = "Avoid ‚ùå" # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
                risk_level = "Uncertainty"
                developer_view += " (Intuition Logic: No strong P/B/T prediction, recommending Avoid.)"
                prediction_result = '?' # ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ P/B/T

        # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏° Developer View ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        if momentum:
            if developer_view: developer_view += " | "
            developer_view += f"Momentum: {', '.join(momentum)}."
        
        if not developer_view and prediction_result == '?':
            developer_view = "No strong patterns or intuition detected."

        return {
            "developer_view": developer_view,
            "prediction": prediction_result,
            "accuracy": self.backtest_accuracy(), # ‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Backtest ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
            "risk": risk_level,
            "recommendation": recommendation
        }

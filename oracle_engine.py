# oracle_engine.py
# OracleEngine v1.0 ‚Äì ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö Pattern
# ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö Streamlit ‡πÑ‡∏î‡πâ

class OracleEngine:
    def __init__(self):
        self.history = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á ‡πÄ‡∏ä‡πà‡∏ô ['P', 'B', 'B', 'P', 'T']

    def add_result(self, result):
        if result in ['P', 'B', 'T']:
            self.history.append(result)

    def reset(self):
        self.history = []

    def analyze(self):
        if len(self.history) < 20:
            return "üîÑ ‡∏£‡∏≠‡∏™‡∏∞‡∏™‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 20 ‡∏ï‡∏≤"

        last_5 = self.history[-5:]
        p_count = last_5.count('P')
        b_count = last_5.count('B')
        t_count = last_5.count('T')

        if p_count >= 4:
            return "üîµ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°: ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (Player)"
        elif b_count >= 4:
            return "üî¥ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°: ‡πÄ‡∏à‡πâ‡∏≤‡∏°‡∏∑‡∏≠ (Banker)"
        elif t_count >= 3:
            return "üü¢ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°: ‡πÄ‡∏™‡∏°‡∏≠ (Tie)"
        else:
            return "‚ö™ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"

# -------------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö Streamlit ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ (Placeholder)

def _cached_backtest_accuracy():
    # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö Backtest ‡πÄ‡∏ï‡πá‡∏°‡πÉ‡∏ô v1.0
    return "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö Backtest ‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ"

def _build_big_road_data(history):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á Big Road ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ‡πÄ‡∏ä‡πà‡∏ô [['P', 'P'], ['B'], ['P']]
    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Streamlit (‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢)
    """
    if not history:
        return []

    grid = []
    col = []

    prev = history[0]
    for res in history:
        if res == prev:
            col.append(res)
        else:
            grid.append(col)
            col = [res]
            prev = res
    if col:
        grid.append(col)
    return grid

import random

class OracleEngine:
    def __init__(self):
        self.history = []
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Pattern ‡πÅ‡∏•‡∏∞ Momentum
        self.pattern_stats = {
            'Pingpong': {'success': 0, 'fail': 0},
            'Two-Cut': {'success': 0, 'fail': 0},
            'Dragon': {'success': 0, 'fail': 0},
            'Triple-Cut': {'success': 0, 'fail': 0},
            'One-Two Pattern': {'success': 0, 'fail': 0},
            'Two-One Pattern': {'success': 0, 'fail': 0},
            'Broken Pattern': {'success': 0, 'fail': 0},
        }
        self.momentum_stats = {
            'B3+ Momentum': {'success': 0, 'fail': 0},
            'P3+ Momentum': {'success': 0, 'fail': 0},
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° Ladder Momentum ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        }
        # Memory Logic: ‡πÄ‡∏Å‡πá‡∏ö Pattern ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏¥‡∏î‡∏ã‡πâ‡∏≥ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        self.memory_blocked_patterns = {} # {'pattern_name': {'failures': count, 'last_failed_outcome': 'P'/'B'}}
        
        self.trap_zone_active = False # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Trap Zone
        self.last_prediction_context = { # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Learning
            'prediction': '?',
            'patterns': [],
            'momentum': [],
            'intuition_applied': False
        }
        self.backtest_results = {'hits': 0, 'misses': 0, 'total': 0, 'drawdown': 0, 'accuracy_pct': 0}
        self.developer_view_components = [] # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Developer View

        # Weights ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Confidence Engine
        self.pattern_weights = {
            'Pingpong': 1.0, 'Two-Cut': 0.9, 'Dragon': 0.95, 'Triple-Cut': 0.85,
            'One-Two Pattern': 0.7, 'Two-One Pattern': 0.7, 'Broken Pattern': 0.6
        }
        self.momentum_weights = {
            'B3+ Momentum': 1.0, 'P3+ Momentum': 1.0, # ‡πÉ‡∏´‡πâ weight ‡∏™‡∏π‡∏á‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏£‡∏á‡πÄ‡∏´‡∏ß‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
        }

    def reset_history(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        self.history = []
        for stats in [self.pattern_stats, self.momentum_stats]:
            for key in stats:
                stats[key] = {'success': 0, 'fail': 0}
        self.memory_blocked_patterns.clear()
        self.trap_zone_active = False
        self.last_prediction_context = {
            'prediction': '?',
            'patterns': [],
            'momentum': [],
            'intuition_applied': False
        }
        self.backtest_results = {'hits': 0, 'misses': 0, 'total': 0, 'drawdown': 0, 'accuracy_pct': 0}
        self.developer_view_components = []

    def _group_outcomes(self, history_data):
        """Helper: ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô P, P, B, B, B -> [PP], [BBB]"""
        if not history_data:
            return []
        
        grouped_outcomes = []
        current_group = []
        
        for item in history_data:
            outcome = item['main_outcome']
            if not current_group:
                current_group.append(outcome)
            elif outcome == current_group[-1]:
                current_group.append(outcome)
            else:
                grouped_outcomes.append(''.join(current_group))
                current_group = [outcome]
        
        if current_group: # Add the last group
            grouped_outcomes.append(''.join(current_group))
            
        return grouped_outcomes

    # --- üß¨ DNA Pattern Analysis ---
    def detect_dna_patterns(self, history_segment):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DNA ‡πÄ‡∏ä‡πà‡∏ô Dragon, Pingpong, Two-Cut
        """
        patterns = []
        if len(history_segment) < 4: # ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 ‡∏ï‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
            return patterns

        seq_str = ''.join([item['main_outcome'] for item in history_segment])
        
        # Pingpong (B-P-B-P) - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 ‡∏ï‡∏±‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
        if len(seq_str) >= 4:
            if seq_str[-4:] == 'PBPB' or seq_str[-4:] == 'BPBP':
                patterns.append('Pingpong')
            elif len(seq_str) >= 6 and (seq_str[-6:] == 'PBPBPB' or seq_str[-6:] == 'BPBPBP'):
                 patterns.append('Pingpong') # Stronger pingpong

        # Dragon (BBBBB...) - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 ‡∏ï‡∏±‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
        if len(seq_str) >= 4:
            if seq_str.endswith('BBBB') or seq_str.endswith('PPPP'):
                patterns.append('Dragon')

        # Two-Cut (BB-PP-BB-PP)
        if len(seq_str) >= 4:
            if seq_str.endswith('BBPP') or seq_str.endswith('PPBB'):
                patterns.append('Two-Cut')
        
        # Triple-Cut (BBB-PPP)
        if len(seq_str) >= 6:
            if seq_str.endswith('BBBPPP') or seq_str.endswith('PPPBBB'):
                patterns.append('Triple-Cut')
        
        # One-Two Pattern (PBB / BPP)
        if len(seq_str) >= 3:
            if seq_str.endswith('PBB') or seq_str.endswith('BPP'):
                patterns.append('One-Two Pattern')
        
        # Two-One Pattern (PPB / BBP)
        if len(seq_str) >= 3:
            if seq_str.endswith('PPB') or seq_str.endswith('BBP'):
                patterns.append('Two-One Pattern')
        
        # Broken Pattern (BPBPPBP) - ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ï‡∏Å‡πÅ‡∏ñ‡∏ß
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
        if len(history_segment) >= 5:
            last_5 = [item['main_outcome'] for item in history_segment[-5:]]
            # Ex: PBBPP, PPBBP - indicating a broken streak/pattern
            if (last_5 == ['P','B','B','P','P'] or last_5 == ['B','P','P','B','B'] or
                last_5 == ['P','P','B','B','P'] or last_5 == ['B','B','P','P','B']):
                patterns.append('Broken Pattern')

        return patterns

    # --- üöÄ Momentum Tracker ---
    def detect_momentum(self, history_segment):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏£‡∏á‡πÄ‡∏´‡∏ß‡∏µ‡πà‡∏¢‡∏á B3+, P3+
        """
        momentum = []
        if len(history_segment) < 3:
            return momentum

        last_outcome = history_segment[-1]['main_outcome']
        streak_count = 1
        for i in range(len(history_segment) - 2, -1, -1):
            if history_segment[i]['main_outcome'] == last_outcome:
                streak_count += 1
            else:
                break
        
        if streak_count >= 3:
            momentum.append(f"{last_outcome}{streak_count}+ Momentum") # B3+ Momentum, P4+ Momentum etc.
        
        # Ladder Momentum (BB-P-BBB-P-BBBB) - ‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏°‡∏≤‡∏Å, require Big Road visualization
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ö‡∏ö linear ‡∏à‡∏∞‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏¢‡∏≤‡∏Å
        # ‡πÄ‡∏ä‡πà‡∏ô history = BBB P BBB P BBBB
        # current_groups = self._group_outcomes(history_segment)
        # if len(current_groups) >= 3:
        #     # Simplified check: streaks growing with single interruptions
        #     # Example: ['BB', 'P', 'BBB', 'P', 'BBBB']
        #     # This requires more robust pattern recognition than simple string matching
        #     pass 

        return momentum

    # --- ‚ö†Ô∏è Trap Zone Detection ---
    def detect_trap_zone(self, history_segment):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÇ‡∏ã‡∏ô‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢ (Zone ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏£‡πá‡∏ß)
        """
        self.trap_zone_active = False
        if len(history_segment) < 2:
            return

        last_2 = ''.join([item['main_outcome'] for item in history_segment[-2:]])
        last_4 = ''.join([item['main_outcome'] for item in history_segment[-4:]])
        last_5 = ''.join([item['main_outcome'] for item in history_segment[-5:]])

        # P1-B1, B1-P1 (‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£)
        if last_2 == 'PB' or last_2 == 'BP':
            self.trap_zone_active = True
            self.developer_view_components.append("‚ö†Ô∏è Trap: P1-B1/B1-P1 (‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£)")
            return

        # B3-P1 ‡∏´‡∏£‡∏∑‡∏≠ P3-B1 ‚Üí ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏±‡∏ß
        if len(history_segment) >= 4:
            if (last_4 == 'BBBP' or last_4 == 'PPPB'):
                self.trap_zone_active = True
                self.developer_view_components.append("‚ö†Ô∏è Trap: B3-P1/P3-B1 (‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏±‡∏ß)")
                return
        
        # Pingpong (PBPB) - ‡∏´‡∏≤‡∏Å Pingpong ‡πÅ‡∏ï‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Pingpong pattern ‡πÅ‡∏ï‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô (‡πÄ‡∏ä‡πà‡∏ô PBPB P B)
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö PBPBP ‡∏´‡∏£‡∏∑‡∏≠ BPBPB ‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏•‡∏±‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        if len(history_segment) >= 5:
            if (last_5 == 'PBPBP' or last_5 == 'BPBPB'): # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Pingpong ‡∏¢‡∏≤‡∏ß‡πÜ
                # ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏•‡∏±‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                if len(history_segment) >= 6 and (history_segment[-6]['main_outcome'] == last_5[0]):
                    self.trap_zone_active = True
                    self.developer_view_components.append("‚ö†Ô∏è Trap: Pingpong Breaking")
                    return


    # --- üéØ Confidence Engine ---
    def calculate_confidence(self, patterns, momentum):
        """
        ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ã‡πâ‡∏≥, Momentum ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà, Trap Zone ‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        """
        total_score = 0
        total_weight_sum = 0

        # ‡∏à‡∏≤‡∏Å DNA Patterns
        for p_name in patterns:
            if p_name in self.pattern_stats:
                stats = self.pattern_stats[p_name]
                if (stats['success'] + stats['fail']) > 0:
                    success_rate = stats['success'] / (stats['success'] + stats['fail'])
                    total_score += success_rate * self.pattern_weights.get(p_name, 0.5)
                else: # ‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Å‡∏¥‡∏î ‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                    total_score += self.pattern_weights.get(p_name, 0.5)
                total_weight_sum += self.pattern_weights.get(p_name, 0.5)

        # ‡∏à‡∏≤‡∏Å Momentum
        for m_name in momentum:
            if m_name in self.momentum_stats:
                stats = self.momentum_stats[m_name]
                if (stats['success'] + stats['fail']) > 0:
                    success_rate = stats['success'] / (stats['success'] + stats['fail'])
                    total_score += success_rate * self.momentum_weights.get(m_name, 0.5)
                else:
                    total_score += self.momentum_weights.get(m_name, 0.5)
                total_weight_sum += self.momentum_weights.get(m_name, 0.5)

        # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ Pattern ‡∏´‡∏£‡∏∑‡∏≠ Momentum ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
        if total_weight_sum == 0:
            confidence = 50 # Default confidence if no patterns/momentum
        else:
            confidence = (total_score / total_weight_sum) * 100
        
        # ‡∏•‡∏î Confidence ‡∏´‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Trap Zone
        if self.trap_zone_active:
            confidence *= 0.5 # ‡∏•‡∏î‡∏•‡∏á 50%
            self.developer_view_components.append(f"Confidence reduced by Trap Zone.")

        return round(confidence)

    # --- üîÅ Memory Logic ---
    def apply_memory_logic(self, current_prediction_candidate, active_patterns, active_momentum):
        """
        ‡∏à‡∏î‡∏à‡∏≥ Pattern ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥ Pattern ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏û‡∏•‡∏≤‡∏î ‚â• 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô None ‡∏´‡∏≤‡∏Å‡∏ñ‡∏π‡∏Å Memory Logic ‡∏ö‡∏•‡πá‡∏≠‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å
        """
        relevant_patterns = active_patterns + active_momentum
        
        for pattern_name in relevant_patterns:
            if pattern_name in self.memory_blocked_patterns:
                failures_count = self.memory_blocked_patterns[pattern_name]['failures']
                # last_failed_outcome = self.memory_blocked_patterns[pattern_name]['last_failed_outcome']
                
                # ‡∏´‡∏≤‡∏Å Pattern ‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏û‡∏•‡∏≤‡∏î ‚â• 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
                # (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ memory logic ‡∏ö‡∏•‡πá‡∏≠‡∏Å pattern ‡∏ô‡∏±‡πâ‡∏ô‡πÜ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡∏ï‡∏≤‡∏°‡∏à‡∏≤‡∏Å pattern ‡∏ô‡∏±‡πâ‡∏ô)
                if failures_count >= 2:
                    self.developer_view_components.append(f"Memory Logic: Pattern '{pattern_name}' blocked (Failures: {failures_count})")
                    return None # ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å Pattern ‡∏ô‡∏µ‡πâ

        return current_prediction_candidate

    # --- üß† Intuition Logic ---
    def apply_intuition_logic(self, history_segment):
        """
        ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ Pattern ‡πÄ‡∏î‡πà‡∏ô ‚Üí ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á ‡πÄ‡∏ä‡πà‡∏ô PBP ‚Üí P
        """
        if len(history_segment) < 3:
            return None

        seq_str = ''.join([item['main_outcome'] for item in history_segment[-5:]]) # ‡∏î‡∏π 5 ‡∏ï‡∏≤‡∏´‡∏•‡∏±‡∏á

        # PBP ‚Üí P (Double Confirmed)
        if seq_str.endswith('PBP'):
            self.developer_view_components.append("Intuition: PBP -> P")
            return 'P'
        
        # BBPBB ‚Üí B (Reverse Trap) - ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô B-B-P-B-B
        if seq_str.endswith('BBPBB'):
            self.developer_view_components.append("Intuition: BBPBB -> B")
            return 'B'

        # 2P1B2P ‚Üí P (Zone Flow) - ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô P-P-B-P-P
        if seq_str.endswith('PPBPP'):
            self.developer_view_components.append("Intuition: PPBPP -> P")
            return 'P'
        
        # Steady Repeat: (PBPBPBP ‚Üí ‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà P) - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Pingpong ‡∏¢‡∏≤‡∏ß‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤ Pingpong ‡∏à‡∏∞‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏£
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ PBPBPB (6 ‡∏ï‡∏≤) ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏≠‡∏≠‡∏Å B ‡πÅ‡∏ï‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô P
        if len(history_segment) >= 6:
            last_6 = ''.join([item['main_outcome'] for item in history_segment[-6:]])
            if last_6 == 'PBPBPB' and history_segment[-1]['main_outcome'] == 'B':
                self.developer_view_components.append("Intuition: Steady Repeat (PBPBPB)")
                return 'P' # ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà P
            elif last_6 == 'BPBPBP' and history_segment[-1]['main_outcome'] == 'P':
                self.developer_view_components.append("Intuition: Steady Repeat (BPBPBP)")
                return 'B' # ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà B

        return None # ‡πÑ‡∏°‡πà‡∏°‡∏µ Intuition ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô

    # --- üî¨ Backtest Simulation ---
    def _run_backtest_simulation(self):
        """
        ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏°‡∏∑‡∏≠ #11‚Äì‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Hit / Miss % ‡πÅ‡∏•‡∏∞ Drawdown
        """
        hits = 0
        misses = 0
        current_drawdown = 0
        max_drawdown = 0
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° Backtest ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà 11
        if len(self.history) < 11:
            return {'hits': 0, 'misses': 0, 'total': 0, 'drawdown': 0, 'accuracy_pct': 0}

        # ‡πÉ‡∏ä‡πâ slice ‡∏Ç‡∏≠‡∏á history ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backtest
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ö‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ logic ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö predict_next
        # ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡∏Ç‡∏≠‡∏á OracleEngine ‡∏à‡∏£‡∏¥‡∏á‡πÜ
        # ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å _update_learning ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å add_result ‡πÉ‡∏ô live prediction
        
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Backtest, ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ simplified logic ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô accuracy
        # ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ç‡∏≠‡∏á engine ‡πÉ‡∏ô backtest loop
        
        for i in range(10, len(self.history)): # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å index 10 (‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà 11)
            segment = self.history[:i] # ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏°‡∏∑‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            
            # ‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö predict_next ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï _update_learning
            # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ backtest ‡πÑ‡∏õ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á engine
            
            # Simplified prediction for backtest:
            patterns = self.detect_dna_patterns(segment)
            momentum = self.detect_momentum(segment)
            
            simulated_prediction = '?'
            if patterns or momentum:
                last_outcome = segment[-1]['main_outcome']
                if 'Dragon' in patterns:
                    simulated_prediction = last_outcome
                elif 'Pingpong' in patterns:
                    simulated_prediction = 'B' if last_outcome == 'P' else 'P'
                elif 'B3+ Momentum' in momentum and last_outcome == 'B':
                    simulated_prediction = 'B'
                elif 'P3+ Momentum' in momentum and last_outcome == 'P':
                    simulated_prediction = 'P'
                elif 'Two-Cut' in patterns: # Two-Cut typically suggests continuation
                    simulated_prediction = last_outcome
                elif 'Triple-Cut' in patterns: # Triple-Cut typically suggests continuation
                    simulated_prediction = last_outcome
                else:
                    simulated_prediction = random.choice(['P', 'B']) # Fallback if no specific pattern for backtest
            else:
                simulated_prediction = random.choice(['P', 'B']) # Fallback for backtest
            
            actual_outcome = self.history[i]['main_outcome']

            if simulated_prediction != '?' and simulated_prediction == actual_outcome:
                hits += 1
                current_drawdown = 0 # Reset drawdown on hit
            elif simulated_prediction != '?' and actual_outcome != 'T' and simulated_prediction != actual_outcome:
                misses += 1
                current_drawdown += 1
            
            max_drawdown = max(max_drawdown, current_drawdown)

        total_games = hits + misses
        accuracy_pct = (hits / total_games * 100) if total_games > 0 else 0

        self.backtest_results = {
            'hits': hits,
            'misses': misses,
            'total': total_games,
            'drawdown': max_drawdown,
            'accuracy_pct': round(accuracy_pct, 1)
        }
        return self.backtest_results

    # --- ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏≤‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏£‡∏¥‡∏á) ---
    def _update_learning(self, actual_outcome):
        """
        ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞ Memory Logic ‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        """
        predicted_outcome = self.last_prediction_context['prediction']
        patterns_detected = self.last_prediction_context['patterns']
        momentum_detected = self.last_prediction_context['momentum']

        if predicted_outcome != '?' and actual_outcome != 'T': # ‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö‡∏ú‡∏•‡πÄ‡∏™‡∏°‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
            if predicted_outcome == actual_outcome:
                # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï success count
                for p_name in patterns_detected:
                    if p_name in self.pattern_stats:
                        self.pattern_stats[p_name]['success'] += 1
                for m_name in momentum_detected:
                    if m_name in self.momentum_stats:
                        self.momentum_stats[m_name]['success'] += 1
                # ‡∏´‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢ Memory Logic, ‡∏≠‡∏≤‡∏à‡∏à‡∏∞ reset counter ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏•‡∏á
                # (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡∏î‡∏Ñ‡πà‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô "‡∏à‡∏≥" ‡πÑ‡∏î‡πâ‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô)
            else:
                # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏¥‡∏î: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï fail count ‡πÅ‡∏•‡∏∞ Memory Logic
                for p_name in patterns_detected:
                    if p_name in self.pattern_stats:
                        self.pattern_stats[p_name]['fail'] += 1
                        self.memory_blocked_patterns.setdefault(p_name, {'failures': 0, 'last_failed_outcome': predicted_outcome})['failures'] += 1
                        self.memory_blocked_patterns[p_name]['last_failed_outcome'] = predicted_outcome
                for m_name in momentum_detected:
                    if m_name in self.momentum_stats:
                        self.momentum_stats[m_name]['fail'] += 1
                        self.memory_blocked_patterns.setdefault(m_name, {'failures': 0, 'last_failed_outcome': predicted_outcome})['failures'] += 1
                        self.memory_blocked_patterns[m_name]['last_failed_outcome'] = predicted_outcome

    def add_result(self, main_outcome, big_road_column=None):
        """
        ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ _update_learning ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô
        """
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡∏°‡πà
        if self.last_prediction_context['prediction'] != '?':
            self._update_learning(main_outcome)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        self.history.append({'main_outcome': main_outcome, 'big_road_column': big_road_column})
        # ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ‡∏Å‡πá clear last_prediction_context ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö prediction ‡πÉ‡∏´‡∏°‡πà
        self.last_prediction_context = { 
            'prediction': '?',
            'patterns': [],
            'momentum': [],
            'intuition_applied': False
        }

    # --- Core Prediction Engine ---
    def predict_next(self):
        """
        ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö SYNAPSE VISION Baccarat 7 ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
        """
        self.developer_view_components = [] # Reset developer view for this prediction cycle
        
        # 1. ‡∏£‡∏±‡∏ö Input ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 20 ‡∏ï‡∏≤)
        if len(self.history) < 20:
            return {
                'prediction': '?',
                'recommendation': 'Avoid ‚ùå',
                'risk': 'Not enough data',
                'accuracy': 'N/A',
                'developer_view': '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ú‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 20 ‡∏ï‡∏≤'
            }

        history_segment = self.history[-30:] # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å 30 ‡∏ï‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏™‡∏∏‡∏î

        # 2. üß¨ DNA Pattern Analysis
        patterns_detected = self.detect_dna_patterns(history_segment)
        self.developer_view_components.append(f"DNA Patterns: {', '.join(patterns_detected) if patterns_detected else 'None'}")

        # 3. üöÄ Momentum Tracker
        momentum_detected = self.detect_momentum(history_segment)
        self.developer_view_components.append(f"Momentum: {', '.join(momentum_detected) if momentum_detected else 'None'}")

        # 4. ‚ö†Ô∏è Trap Zone Detection
        self.detect_trap_zone(history_segment) # ‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ self.trap_zone_active ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á dev_view_components ‡πÄ‡∏≠‡∏á

        # 5. üéØ Confidence Engine
        confidence = self.calculate_confidence(patterns_detected, momentum_detected)
        self.developer_view_components.append(f"Confidence: {confidence}%")

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        prediction = '?'
        recommendation = 'Avoid ‚ùå'
        risk = 'Normal'
        intuition_applied = False

        # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏≤‡∏° Confidence
        if confidence >= 60:
            last_outcome = self.history[-1]['main_outcome']
            
            # --- ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å (‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç) ---
            # Dragon (‡∏•‡∏≤‡∏Å‡∏¢‡∏≤‡∏ß)
            if 'Dragon' in patterns_detected:
                prediction = last_outcome
                self.developer_view_components.append(f"Predict by: Dragon ({last_outcome} continuation)")
            # Momentum 3+ (‡πÅ‡∏£‡∏á‡πÄ‡∏´‡∏ß‡∏µ‡πà‡∏¢‡∏á)
            elif f"{last_outcome}3+ Momentum" in momentum_detected:
                prediction = last_outcome
                self.developer_view_components.append(f"Predict by: Momentum ({last_outcome} continuation)")
            # Pingpong (‡∏™‡∏•‡∏±‡∏ö)
            elif 'Pingpong' in patterns_detected:
                prediction = 'B' if last_outcome == 'P' else 'P'
                self.developer_view_components.append(f"Predict by: Pingpong (Opposite of {last_outcome})")
            # Two-Cut (‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏î)
            elif 'Two-Cut' in patterns_detected:
                prediction = last_outcome # ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏ã‡πâ‡∏≥‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
                self.developer_view_components.append(f"Predict by: Two-Cut ({last_outcome} continuation)")
            # Triple-Cut (‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏î)
            elif 'Triple-Cut' in patterns_detected:
                prediction = last_outcome # ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏ã‡πâ‡∏≥‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
                self.developer_view_components.append(f"Predict by: Triple-Cut ({last_outcome} continuation)")
            # One-Two Pattern
            elif 'One-Two Pattern' in patterns_detected:
                # PBB -> P, BPP -> B (predicts the single opposite)
                if len(history_segment) >= 3:
                    if history_segment[-3]['main_outcome'] == 'P' and history_segment[-2]['main_outcome'] == 'B' and last_outcome == 'B':
                        prediction = 'P'
                    elif history_segment[-3]['main_outcome'] == 'B' and history_segment[-2]['main_outcome'] == 'P' and last_outcome == 'P':
                        prediction = 'B'
                    else: prediction = random.choice(['P', 'B']) # Fallback if not clear or not this exact pattern
                else: prediction = random.choice(['P', 'B'])
                self.developer_view_components.append(f"Predict by: One-Two Pattern ({prediction})")
            # Two-One Pattern
            elif 'Two-One Pattern' in patterns_detected:
                # PPB -> P, BBP -> B (predicts continuation of the pair)
                if len(history_segment) >= 3:
                    if history_segment[-3]['main_outcome'] == 'P' and history_segment[-2]['main_outcome'] == 'P' and last_outcome == 'B':
                        prediction = 'P'
                    elif history_segment[-3]['main_outcome'] == 'B' and history_segment[-2]['main_outcome'] == 'B' and last_outcome == 'P':
                        prediction = 'B'
                    else: prediction = random.choice(['P', 'B']) # Fallback if not clear or not this exact pattern
                else: prediction = random.choice(['P', 'B'])
                self.developer_view_components.append(f"Predict by: Two-One Pattern ({prediction})")
            # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ Pattern ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÅ‡∏ï‡πà Confidence ‡∏™‡∏π‡∏á‡∏û‡∏≠ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Intuition
            else:
                intuition_pred = self.apply_intuition_logic(history_segment)
                if intuition_pred:
                    prediction = intuition_pred
                    intuition_applied = True
                else:
                    prediction = random.choice(['P', 'B']) # Fallback ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
                    self.developer_view_components.append("Predict by: Random Fallback (No strong pattern/intuition)")
            
            # 6. üîÅ Memory Logic: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            original_prediction = prediction
            prediction_after_memory = self.apply_memory_logic(prediction, patterns_detected, momentum_detected)
            
            if prediction_after_memory is None: # ‡∏´‡∏≤‡∏Å‡∏ñ‡∏π‡∏Å Memory Logic ‡∏ö‡∏•‡πá‡∏≠‡∏Å
                self.developer_view_components.append(f"Memory Logic Blocked: Original '{original_prediction}' rejected.")
                # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Intuition Logic ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                intuition_pred = self.apply_intuition_logic(history_segment)
                if intuition_pred and intuition_pred != original_prediction: # ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å
                    prediction = intuition_pred
                    intuition_applied = True
                    self.developer_view_components.append(f"Memory Logic: Fallback to Intuition ({prediction}).")
                else:
                    # ‡∏´‡∏≤‡∏Å Intuition ‡∏Å‡πá‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏ú‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å, ‡πÉ‡∏´‡πâ‡∏™‡∏∏‡πà‡∏° P/B
                    prediction = random.choice(['P', 'B']) 
                    if prediction == original_prediction and original_prediction != '?': # ‡∏ñ‡πâ‡∏≤‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏µ‡∏Å
                         prediction = 'B' if original_prediction == 'P' else 'P' # ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏≠‡∏µ‡∏Å‡∏ù‡∏±‡πà‡∏á‡πÅ‡∏ó‡∏ô
                    self.developer_view_components.append(f"Memory Logic: Fallback to {prediction} after block.")
                risk = 'Memory Rejection' # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Risk level
            else:
                prediction = prediction_after_memory # Use the prediction passed through memory logic

            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Recommendation ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Memory Logic
            if prediction in ['P', 'B']:
                recommendation = 'Play ‚úÖ'
                if intuition_applied:
                    self.developer_view_components.append("Intuition Logic Applied.")
            else:
                recommendation = 'Avoid ‚ùå'
                risk = 'Low Confidence / Undetermined'

        else: # Confidence < 60%
            prediction = '‚ö†Ô∏è' # ‡πÉ‡∏ä‡πâ ‚ö†Ô∏è ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏•‡πà‡∏ô
            recommendation = 'Avoid ‚ùå'
            risk = 'Low Confidence'
            self.developer_view_components.append("Confidence < 60%. Not playing.")
        
        # 7. üî¨ Backtest Simulation
        backtest_results = self._run_backtest_simulation()
        backtest_accuracy_str = f"{backtest_results['accuracy_pct']}% ({backtest_results['hits']}/{backtest_results['total']})"
        self.developer_view_components.append(f"Backtest Accuracy: {backtest_accuracy_str}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Drawdown
        if backtest_results['drawdown'] >= 3:
            risk = 'Drawdown Alert'
            recommendation = 'Avoid ‚ùå'
            self.developer_view_components.append(f"Drawdown Alert! (Max Drawdown: {backtest_results['drawdown']})")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Trap Zone ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        if self.trap_zone_active:
            risk = 'Trap Zone'
            recommendation = 'Avoid ‚ùå'
            self.developer_view_components.append("Final Risk: Trap Zone Detected.")


        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Developer View
        grouped_outcomes_str = ', '.join([f"[{g}]" for g in self._group_outcomes(history_segment)])
        final_dev_view = f"{grouped_outcomes_str}; {'; '.join(self.developer_view_components)}"

        # ‡πÄ‡∏Å‡πá‡∏ö context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        self.last_prediction_context = {
            'prediction': prediction,
            'patterns': patterns_detected,
            'momentum': momentum_detected,
            'intuition_applied': intuition_applied
        }

        # ‚úÖ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
        return {
            'prediction': prediction,
            'recommendation': recommendation,
            'risk': risk,
            'accuracy': backtest_accuracy_str,
            'developer_view': final_dev_view
        }

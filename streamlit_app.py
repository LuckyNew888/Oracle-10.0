import streamlit as st
from oracle_engine import OracleEngine
import pandas as pd

st.set_page_config(page_title="üîÆ Oracle Baccarat AI", layout="centered")

# CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
st.markdown("""
    <style>
    .title-center {
        text-align: center;
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 0.25rem;
    }
    </style>
""", unsafe_allow_html=True)
st.markdown('<div class="title-center">üîÆ Oracle Baccarat AI</div>', unsafe_allow_html=True)

# --- ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Session State ---
if "history" not in st.session_state:
    st.session_state.history = []
if "money_balance" not in st.session_state:
    st.session_state.money_balance = 1000
if "bet_amount" not in st.session_state:
    st.session_state.bet_amount = 100
if "bet_log" not in st.session_state:
    st.session_state.bet_log = []
if "oracle_engine" not in st.session_state:
    st.session_state.oracle_engine = OracleEngine()

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Callback ---
def add_to_history(result):
    st.session_state.history.append(result)

def remove_last_from_history():
    if st.session_state.history:
        st.session_state.history.pop()
        
def reset_all_history():
    st.session_state.history = []
    st.session_state.money_balance = 1000
    st.session_state.bet_log = []
    st.session_state.oracle_engine = OracleEngine()

def record_bet_result(predicted_side, actual_result):
    bet_amt = st.session_state.bet_amount
    win_loss = 0
    outcome = "Miss"

    if predicted_side in ['P', 'B', 'T']:
        if predicted_side == actual_result:
            outcome = "Hit"
            if predicted_side == 'P':
                win_loss = bet_amt
            elif predicted_side == 'B':
                win_loss = bet_amt * 0.95
            elif predicted_side == 'T':
                win_loss = bet_amt * 8
            st.session_state.money_balance += win_loss
        else:
            win_loss = -bet_amt
            st.session_state.money_balance -= bet_amt

    st.session_state.bet_log.append({
        "Predict": predicted_side,
        "Actual": actual_result,
        "Win/Loss": f"{win_loss:+.2f}",
        "Balance": f"{st.session_state.money_balance:.2f}",
        "Outcome": outcome
    })
    
    st.session_state.history.append(actual_result)

# ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Engine
engine = st.session_state.oracle_engine
engine.history = st.session_state.history.copy() 

# --- ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô ---
st.markdown("---")
st.markdown(f"### üí∞ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: **{st.session_state.money_balance:.2f} ‡∏ö‡∏≤‡∏ó**")
st.session_state.bet_amount = st.number_input(
    "üí∏ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ï‡πà‡∏≠‡∏ï‡∏≤:", 
    min_value=1, 
    value=st.session_state.bet_amount, 
    step=10
)

# ‡πÄ‡∏ä‡πá‡∏Ñ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ 20 ‡∏ï‡∏≤
if len(engine.history) < 20:
    st.warning(f"‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 20 ‡∏ï‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥\n(‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ **{len(engine.history)}** ‡∏ï‡∏≤)")

# --- ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ---
prediction_data = None
next_pred_side = '?' # Default value
conf = 0 # Default confidence

# ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö 20 ‡∏ï‡∏≤
if len(engine.history) >= 20:
    prediction_data = engine.predict_next() 
    
    if isinstance(prediction_data, dict) and 'prediction' in prediction_data and 'recommendation' in prediction_data:
        next_pred_side = prediction_data['prediction']
        conf = engine.confidence_score() 
        
        emoji_map = {'P': 'üîµ Player', 'B': 'üî¥ Banker', 'T': 'üü¢ Tie', '?': '‚Äî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥'}

        st.markdown(f"### üîÆ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: **{emoji_map.get(next_pred_side, '?')}** (Confidence: {conf}%)")
        st.markdown(f"**üìç ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á:** {prediction_data['risk']}")
        st.markdown(f"**üßæ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** **{prediction_data['recommendation']}**")
        st.markdown(f"**üß¨ Developer View:** {prediction_data['developer_view']}")
    else:
        st.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡∏≤‡∏Å OracleEngine. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 'oracle_engine.py'")
        st.markdown("### üîÆ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: ‚Äî (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ)")
else:
    st.markdown("### üîÆ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: ‚Äî (‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 20 ‡∏ï‡∏≤)")

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤ ---
st.markdown("---")
st.markdown("### üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤:")

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö prediction_data ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
if prediction_data and isinstance(prediction_data, dict) and 'recommendation' in prediction_data:
    if prediction_data['recommendation'] == "Play ‚úÖ":
        st.info(f"‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ **{emoji_map.get(prediction_data['prediction'], '')}** ‡πÉ‡∏ô‡∏ï‡∏≤‡∏ô‡∏µ‡πâ. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏à‡∏ö‡∏£‡∏≠‡∏ö")
        col_play_p, col_play_b, col_play_t = st.columns(3)
        with col_play_p:
            if st.button(f"‡∏ú‡∏•‡∏≠‡∏≠‡∏Å üîµ (P)", key="result_P_play", use_container_width=True):
                record_bet_result(prediction_data['prediction'], 'P')
                st.rerun()
        with col_play_b:
            if st.button(f"‡∏ú‡∏•‡∏≠‡∏≠‡∏Å üî¥ (B)", key="result_B_play", use_container_width=True):
                record_bet_result(prediction_data['prediction'], 'B')
                st.rerun()
        with col_play_t:
            if st.button(f"‡∏ú‡∏•‡∏≠‡∏≠‡∏Å üü¢ (T)", key="result_T_play", use_container_width=True):
                record_bet_result(prediction_data['prediction'], 'T')
                st.rerun()
    elif prediction_data['recommendation'] == "Avoid ‚ùå":
        st.warning("‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ **‡∏á‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô** ‡πÉ‡∏ô‡∏ï‡∏≤‡∏ô‡∏µ‡πâ. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        col_avoid_p, col_avoid_b, col_avoid_t = st.columns(3)
        with col_avoid_p:
            if st.button(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ‡∏≠‡∏≠‡∏Å üîµ (P)", key="no_bet_P", use_container_width=True):
                add_to_history('P')
                st.rerun()
        with col_avoid_b:
            if st.button(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ‡∏≠‡∏≠‡∏Å üî¥ (B)", key="no_bet_B", use_container_width=True):
                add_to_history('B')
                st.rerun()
        with col_avoid_t:
            if st.button(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ‡∏≠‡∏≠‡∏Å üü¢ (T)", key="no_bet_T", use_container_width=True):
                add_to_history('T')
                st.rerun()
else: # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ prediction_data ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå (‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö 20 ‡∏ï‡∏≤)
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 20 ‡∏ï‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    col_init_p, col_init_b, col_init_t = st.columns(3)
    with col_init_p:
        if st.button(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ‡∏≠‡∏≠‡∏Å üîµ (P)", key="init_P", use_container_width=True):
            add_to_history('P')
            st.rerun()
    with col_init_b:
        if st.button(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ‡∏≠‡∏≠‡∏Å üî¥ (B)", key="init_B", use_container_width=True):
            add_to_history('B')
            st.rerun()
    with col_init_t:
        if st.button(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ‡∏≠‡∏≠‡∏Å üü¢ (T)", key="init_T", use_container_width=True):
            add_to_history('T')
            st.rerun()

# --- ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô (Bet Log) ---
st.markdown("### üìä ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô")
if st.session_state.bet_log:
    df_log = pd.DataFrame(st.session_state.bet_log)
    st.dataframe(df_log, use_container_width=True, hide_index=True)
else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ")

# --- ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ú‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á ---
st.markdown("---")
st.markdown("### üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ú‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏ö‡∏ö)")
history_emojis = engine.get_history_emojis()
if history_emojis:
    display_history = []
    for i in range(0, len(history_emojis), 10):
        display_history.append(" ".join(history_emojis[i:i+10]))
    st.markdown("\n".join(display_history))
else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

# --- ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ (‡∏•‡∏ö/‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï) ---
col_hist1, col_hist2 = st.columns(2)
with col_hist1:
    if st.button("‚Ü©Ô∏è ‡∏•‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", key="delLastHist", use_container_width=True, on_click=remove_last_from_history):
        st.rerun()
with col_hist2:
    if st.button("üßπ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", key="resetAllHist", use_container_width=True, on_click=reset_all_history):
        st.rerun()

st.markdown("---")
st.caption("‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Oracle Baccarat AI ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏∏‡∏ì")

import streamlit as st
import asyncio
import time
from oracle_engine import OracleEngine # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå oracle_engine.py ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ Streamlit
st.set_page_config(page_title="ORACLE Baccarat Predictor", layout="centered") # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô title ‡πÉ‡∏ô browser tab

# Custom CSS for centered gold title and reduced spacing
st.markdown("""
<style>
.center-gold-title {
    text-align: center;
    color: gold;
    font-size: 3.5em; /* Adjust font size as needed */
    font-weight: bold;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    margin-bottom: 0.5rem; /* Reduced space below title */
    padding-bottom: 0px;
}
h3 {
    margin-top: 0.5rem; /* Reduced space above h3 */
    margin-bottom: 0.5rem; /* Reduced space below h3 */
}
.stMarkdown, .stText, .stInfo, .stWarning, .stSuccess {
    margin-top: 0.2rem; /* Reduced space above various text elements */
    margin-bottom: 0.2rem; /* Reduced space below various text elements */
}
.stButton>button {
    margin-top: 0.2rem; /* Reduced space around buttons */
    margin-bottom: 0.2rem;
}
/* Specific style for prediction text to make it larger */
.prediction-text {
    font-size: 1.5em; /* Larger font size for prediction */
    font-weight: bold;
}
/* Reduce padding around columns to make buttons closer */
.st-emotion-cache-1colbu6 { /* This is a Streamlit generated class, might change */
    padding-left: 0.2rem;
    padding-right: 0.2rem;
}

</style>
""", unsafe_allow_html=True)

st.markdown('<h1 class="center-gold-title">üîÆ ORACLE</h1>', unsafe_allow_html=True)

# --- ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á OracleEngine ---
if 'oracle_engine' not in st.session_state:
    st.session_state.oracle_engine = OracleEngine()
if 'oracle_history' not in st.session_state:
    st.session_state.oracle_history = []
if 'losing_streak_prediction' not in st.session_state:
    st.session_state.losing_streak_prediction = 0

# ‡∏î‡∏∂‡∏á instance ‡∏Ç‡∏≠‡∏á OracleEngine ‡∏à‡∏≤‡∏Å session_state ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
oracle = st.session_state.oracle_engine

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ---
st.markdown("<h3>‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:</h3>", unsafe_allow_html=True) # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠

if len(st.session_state.oracle_history) >= 20: 
    # ‡∏™‡πà‡∏á history ‡∏à‡∏≤‡∏Å session_state ‡πÉ‡∏´‡πâ Engine ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    result = oracle.predict_next(st.session_state.oracle_history)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    emoji_map = {'P': 'üü¶', 'B': 'üü•', 'T': '‚ö™Ô∏è', '‚ö†Ô∏è': '‚ö†Ô∏è'}
    
    # Text for prediction based on result['prediction']
    prediction_text = ""
    if result['prediction'] == 'P':
        prediction_text = f"üîµ P"
    elif result['prediction'] == 'B':
        prediction_text = f"üî¥ B"
    elif result['prediction'] == '‚ö†Ô∏è':
        prediction_text = f"‚ö†Ô∏è ‡∏á‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô"
    else:
        prediction_text = result['prediction'] # Fallback for '?'

    # Adjust font size for prediction using HTML/CSS
    st.markdown(f'<p class="prediction-text">‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {prediction_text}</p>', unsafe_allow_html=True)
    
    st.markdown(f"**üéØ Accuracy:** {result['accuracy']}")
    st.markdown(f"**üìç Risk:** {result['risk']}")
    st.markdown(f"**üßæ Recommendation:** {result['recommendation']}")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏û‡πâ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    if st.session_state.losing_streak_prediction > 0:
        st.warning(f"**‚ùå ‡πÅ‡∏û‡πâ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô:** {st.session_state.losing_streak_prediction} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    else:
        st.success(f"**‚úÖ ‡πÅ‡∏û‡πâ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô:** 0 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á") # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÅ‡∏û‡πâ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô
else:
    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠
    st.info(f"üîÆ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ú‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 20 ‡∏ï‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏°‡∏µ {len(st.session_state.oracle_history)} ‡∏ï‡∏≤)")

# --- ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á ---
st.markdown("<h3>üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</h3>", unsafe_allow_html=True)
if st.session_state.oracle_history:
    emoji_history = {'P': 'üü¶', 'B': 'üü•', 'T': '‚ö™Ô∏è'}
    st.write(' '.join(emoji_history.get(item['main_outcome'], '') for item in st.session_state.oracle_history))
else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥")

# --- ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ---
st.markdown("<h3>‚ûï ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</h3>", unsafe_allow_html=True)
col1, col2, col3, col4 = st.columns(4)

with col1:
    if st.button("üü¶ P", use_container_width=True, key="add_p"):
        actual_outcome_for_prev_pred = 'P'
        # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï losing streak
        if len(st.session_state.oracle_history) >= 20 and oracle.last_prediction_context['prediction'] != '?' and oracle.last_prediction_context['prediction'] != '‚ö†Ô∏è':
            prev_predicted_outcome = oracle.last_prediction_context['prediction']
            
            if actual_outcome_for_prev_pred == 'T': # Tie, no change to streak
                pass
            elif prev_predicted_outcome == actual_outcome_for_prev_pred: # Correct prediction
                st.session_state.losing_streak_prediction = 0
            else: # Incorrect prediction
                st.session_state.losing_streak_prediction += 1
        
        st.session_state.oracle_history.append({'main_outcome': actual_outcome_for_prev_pred}) # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á history
        oracle.update_learning_state(actual_outcome_for_prev_pred) # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ç‡∏≠‡∏á Engine
        st.rerun() 
with col2:
    if st.button("üü• B", use_container_width=True, key="add_b"):
        actual_outcome_for_prev_pred = 'B'
        if len(st.session_state.oracle_history) >= 20 and oracle.last_prediction_context['prediction'] != '?' and oracle.last_prediction_context['prediction'] != '‚ö†Ô∏è':
            prev_predicted_outcome = oracle.last_prediction_context['prediction']
            if actual_outcome_for_prev_pred == 'T':
                pass
            elif prev_predicted_outcome == actual_outcome_for_prev_pred:
                st.session_state.losing_streak_prediction = 0
            else:
                st.session_state.losing_streak_prediction += 1
        
        st.session_state.oracle_history.append({'main_outcome': actual_outcome_for_prev_pred})
        oracle.update_learning_state(actual_outcome_for_prev_pred)
        st.rerun()
with col3:
    if st.button("‚ö™Ô∏è T", use_container_width=True, key="add_t"):
        actual_outcome_for_prev_pred = 'T'
        # Ties do not affect losing streak, so only update learning state
        # No need to check for len(history) here, as update_learning_state will handle prediction context
        
        st.session_state.oracle_history.append({'main_outcome': actual_outcome_for_prev_pred})
        oracle.update_learning_state(actual_outcome_for_prev_pred)
        st.rerun()
with col4:
    if st.button("‚ùå ‡∏•‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", use_container_width=True, key="remove_last"):
        if st.session_state.oracle_history:
            st.session_state.oracle_history.pop() # ‡∏•‡∏ö‡∏à‡∏≤‡∏Å history ‡πÉ‡∏ô session_state
            
            # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Engine ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ" ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á OracleEngine instance ‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            st.session_state.oracle_engine = OracleEngine() 
            st.session_state.losing_streak_prediction = 0 # Reset for recalculation during replay
            
            # ‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Engine ‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ" ‡πÉ‡∏´‡∏°‡πà
            for i in range(len(st.session_state.oracle_history)):
                # Simulate the process: predict, then update learning
                current_history_segment_for_replay = st.session_state.oracle_history[:i+1] # History up to this point
                
                # We need to simulate the prediction process for each hand to correctly
                # update the internal state for losing streak and learning
                temp_result = None
                if len(current_history_segment_for_replay) >= 20:
                    temp_result = st.session_state.oracle_engine.predict_next(current_history_segment_for_replay)
                    # Manually set last_prediction_context for learning
                    st.session_state.oracle_engine.last_prediction_context = {
                        'prediction': temp_result['prediction'],
                        'patterns': temp_result['developer_view'].split(';')[1].replace('DNA Patterns: ', '').split(', ') if 'DNA Patterns: ' in temp_result['developer_view'] else [],
                        'momentum': temp_result['developer_view'].split(';')[2].replace('Momentum: ', '').split(', ') if 'Momentum: ' in temp_result['developer_view'] else [],
                        'intuition_applied': 'Intuition:' in temp_result['developer_view']
                    }
                    
                    # Update losing streak during replay
                    if temp_result['prediction'] != '?' and temp_result['prediction'] != '‚ö†Ô∏è':
                        if current_history_segment_for_replay[-1]['main_outcome'] == 'T':
                            pass
                        elif temp_result['prediction'] == current_history_segment_for_replay[-1]['main_outcome']:
                            st.session_state.losing_streak_prediction = 0
                        else:
                            st.session_state.losing_streak_prediction += 1
                else: # Clear last_prediction_context if not enough data for this hand
                    st.session_state.oracle_engine.last_prediction_context = {
                        'prediction': '?', 'patterns': [], 'momentum': [], 'intuition_applied': False
                    }
                
                # Update learning state after each hand in replay
                st.session_state.oracle_engine.update_learning_state(current_history_segment_for_replay[-1]['main_outcome'])
            st.rerun()

# --- ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠ ---
if st.button("üîÑ Reset ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", use_container_width=True, key="reset_all"):
    st.session_state.oracle_history.clear() # ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    st.session_state.oracle_engine = OracleEngine() # ‡∏™‡∏£‡πâ‡∏≤‡∏á OracleEngine instance ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    st.session_state.losing_streak_prediction = 0 # Reset losing streak
    st.rerun()

# --- Developer View (Moved to bottom and in expander) ---
# Call predict_next again just to get the developer_view string
# This is a bit redundant but ensures dev view is always fresh after all updates
if len(st.session_state.oracle_history) >= 20: 
    current_prediction_info = oracle.predict_next(st.session_state.oracle_history)
    with st.expander("üß¨ Developer View: ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"):
        st.code(current_prediction_info['developer_view'], language='text')

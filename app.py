import streamlit as st
import asyncio
import time
from oracle_engine import OracleEngine # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå oracle_engine.py ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ Streamlit
st.set_page_config(page_title="SYNAPSE VISION Baccarat", layout="centered")
st.title("üß† SYNAPSE VISION Baccarat Predictor")
st.markdown("---")

# --- ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á OracleEngine ---
# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ OracleEngine ‡πÅ‡∏•‡∏∞ history ‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô session_state ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
if 'oracle_engine' not in st.session_state:
    st.session_state.oracle_engine = OracleEngine()
if 'oracle_history' not in st.session_state:
    st.session_state.oracle_history = []
if 'gemini_analysis_result' not in st.session_state:
    st.session_state.gemini_analysis_result = None

# ‡∏î‡∏∂‡∏á instance ‡∏Ç‡∏≠‡∏á OracleEngine ‡∏à‡∏≤‡∏Å session_state ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
oracle = st.session_state.oracle_engine
# ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï history ‡πÉ‡∏ô OracleEngine ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å session_state
oracle.history = st.session_state.oracle_history

# ====== ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ï‡∏£‡∏µ‡∏Ñ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á P ‡∏´‡∏£‡∏∑‡∏≠ B (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° T) =======
def get_current_pb_streak(history_data):
    """
    Calculates the current streak length of P or B, ignoring T.
    Returns (outcome_type, streak_length) e.g., ('P', 5) or (None, 0) if no P/B.
    """
    if not history_data:
        return None, 0

    streak_type = None
    streak_length = 0

    # Find the last non-T outcome to start the streak
    start_index = -1
    for i in range(len(history_data) - 1, -1, -1):
        if history_data[i]['main_outcome'] != 'T':
            streak_type = history_data[i]['main_outcome']
            start_index = i
            break
    
    if streak_type is None: # Only T's or empty history
        return None, 0

    # Count the streak backwards from start_index
    for i in range(start_index, -1, -1):
        current_outcome = history_data[i]['main_outcome']
        if current_outcome == 'T':
            continue # T doesn't break the streak, it's ignored
        if current_outcome == streak_type:
            streak_length += 1
        else:
            break # Streak broken by a different outcome

    return streak_type, streak_length

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ---
st.markdown("### üîÆ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")

# oracle.predict_next() ‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 20 ‡∏ï‡∏≤
if len(oracle.history) >= 20: 
    result = oracle.predict_next()

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Developer Mode
    emoji_map = {'P': 'üü¶', 'B': 'üü•', 'T': '‚ö™Ô∏è', '‚ö†Ô∏è': '‚ö†Ô∏è'}
    prediction_display = f"## {emoji_map.get(result['prediction'], '')} {result['prediction']}"
    
    st.markdown(f"üß¨ **Developer View:** {result['developer_view']}")
    st.markdown(f"") # ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á
    st.markdown(f"### {prediction_display}")
    st.markdown(f"üéØ **Accuracy:** {result['accuracy']}")
    st.markdown(f"üìç **Risk:** {result['risk']}")
    st.markdown(f"üßæ **Recommendation:** {result['recommendation']}")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ï‡∏£‡∏µ‡∏Ñ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (P/B)
    current_streak_type, current_streak_length = get_current_pb_streak(oracle.history)
    if current_streak_type and current_streak_length > 0:
        st.info(f"üìà ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏µ‡∏™‡∏ï‡∏£‡∏µ‡∏Ñ **{current_streak_type}** ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô **{current_streak_length}** ‡∏ï‡∏≤ (‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö‡πÄ‡∏™‡∏°‡∏≠)")
    else:
        st.info("üìä ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ï‡∏£‡∏µ‡∏Ñ P/B ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô (‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö‡πÄ‡∏™‡∏°‡∏≠)")

else:
    st.info(f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ú‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 20 ‡∏ï‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ SYNAPSE VISION Baccarat ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏°‡∏µ {len(oracle.history)} ‡∏ï‡∏≤)")

# --- ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á ---
st.markdown("---")
st.markdown("### üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
if st.session_state.oracle_history:
    emoji_history = {'P': 'üü¶', 'B': 'üü•', 'T': '‚ö™Ô∏è'}
    st.write(' '.join(emoji_history.get(item['main_outcome'], '') for item in st.session_state.oracle_history))
else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥")

# --- ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ---
st.markdown("---")
st.markdown("### ‚ûï ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
col1, col2, col3, col4 = st.columns(4)

with col1:
    if st.button("üü¶ P", use_container_width=True, key="add_p"):
        oracle.add_result('P')
        st.session_state.oracle_history.append({'main_outcome': 'P'}) # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI history
        st.session_state.gemini_analysis_result = None # Clear previous Gemini analysis
        st.rerun() # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ Streamlit refresh ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
with col2:
    if st.button("üü• B", use_container_width=True, key="add_b"):
        oracle.add_result('B')
        st.session_state.oracle_history.append({'main_outcome': 'B'})
        st.session_state.gemini_analysis_result = None
        st.rerun()
with col3:
    if st.button("‚ö™Ô∏è T", use_container_width=True, key="add_t"):
        oracle.add_result('T')
        st.session_state.oracle_history.append({'main_outcome': 'T'})
        st.session_state.gemini_analysis_result = None
        st.rerun()
with col4:
    if st.button("‚ùå ‡∏•‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", use_container_width=True, key="remove_last"):
        if st.session_state.oracle_history:
            # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á OracleEngine ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö
            # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠ reset Engine ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏™‡πà‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
            st.session_state.oracle_history.pop() # ‡∏•‡∏ö‡∏à‡∏≤‡∏Å UI history
            oracle.reset_history() # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Engine ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            # ‡πÉ‡∏™‡πà‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Engine ‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ" ‡πÉ‡∏´‡∏°‡πà
            for item in st.session_state.oracle_history:
                oracle.add_result(item['main_outcome'])
            st.session_state.gemini_analysis_result = None # Clear previous Gemini analysis
            st.rerun()

# --- ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠ ---
st.markdown("---")
if st.button("üîÑ Reset ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", use_container_width=True, key="reset_all"):
    st.session_state.oracle_history.clear()
    st.session_state.oracle_engine.reset_history() # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å reset_history ‡∏Ç‡∏≠‡∏á OracleEngine ‡∏î‡πâ‡∏ß‡∏¢
    st.session_state.gemini_analysis_result = None # Clear previous Gemini analysis
    st.rerun()

# --- Gemini Integration ---
st.markdown("---")
st.markdown("### üß† Gemini AI Insights")

# Function to simulate API call to Gemini
async def call_gemini_analysis(history_data):
    """
    Simulates an API call to Gemini to get an analysis of the Baccarat history.
    In a real app, this would make an actual network request.
    """
    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ Gemini AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"):
        # Simulate network delay and API call
        await asyncio.sleep(3) # Simulate 3 seconds of processing time

        # Prepare context for Gemini (mocked for now)
        history_str = ' '.join([item['main_outcome'] for item in history_data[-30:]]) # last 30 hands for context
        
        # --- Conceptual Real API Call (Not runnable in this environment) ---
        # import requests
        # payload = {
        #     "contents": [
        #         {
        #             "role": "user",
        #             "parts": [
        #                 {"text": f"Based on this Baccarat history: {history_str}. Provide a concise analysis of patterns, momentum, and potential risks. Focus on actionable insights for prediction. Use Thai language. Format as a markdown summary."},
        #             ]
        #         }
        #     ],
        #     "generationConfig": {
        #         "responseMimeType": "text/plain", # or "application/json" if you need structured output
        #     }
        # }
        # api_key = "" # API key provided by environment
        # api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key={api_key}"
        # response = requests.post(api_url, json=payload)
        # if response.status_code == 200:
        #     response_data = response.json()
        #     gemini_analysis = response_data['candidates'][0]['content']['parts'][0]['text']
        # else:
        #     gemini_analysis = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Gemini ‡∏´‡∏£‡∏∑‡∏≠ API Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á."
        # --- End of Conceptual Real API Call ---

        # Mocked Gemini Analysis for demonstration
        mock_analysis = f"""
**‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏î‡∏¢ Gemini AI (‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ {len(history_data)} ‡∏ï‡∏≤):**

* **‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:** ‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ({history_str}), ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡∏≠‡∏á {'**Pingpong (‡∏™‡∏•‡∏±‡∏ö)**' if 'PBP' in history_str or 'BPB' in history_str else '**Dragon (‡∏•‡∏≤‡∏Å‡∏¢‡∏≤‡∏ß)**' if 'BBB' in history_str or 'PPP' in history_str else '**‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô**'}.
* **‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡∏±‡∏°:** {'‡∏°‡∏µ‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡∏±‡∏°‡∏Ç‡∏≠‡∏á **‡πÄ‡∏à‡πâ‡∏≤‡∏°‡∏∑‡∏≠ (B)** ‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á' if history_str.endswith('BBBB') else '‡∏°‡∏µ‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡∏±‡∏°‡∏Ç‡∏≠‡∏á **‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (P)** ‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á' if history_str.endswith('PPPP') else '‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡∏±‡∏°‡∏¢‡∏±‡∏á **‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô** ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á'}.
* **‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤:**
    * ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÇ‡∏ã‡∏ô `{'**Trap Zone** (‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£/‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏£‡πá‡∏ß)' if len(history_data) >= 2 and (history_data[-1]['main_outcome'] != history_data[-2]['main_outcome']) else '‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°'}`.
    * ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏™‡∏ï‡∏£‡∏µ‡∏Ñ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà.
* **‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:** ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà {'**‡∏Ñ‡∏≤‡∏î‡πÄ‡∏î‡∏≤‡∏¢‡∏≤‡∏Å**' if history_str.count('P') - history_str.count('B') < 3 and history_str.count('B') - history_str.count('P') < 3 else '**‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô**'}. ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©.

"""
        return mock_analysis

if st.button("‚ú® ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", use_container_width=True, key="call_gemini_btn"):
    if len(oracle.history) > 0: # Only call if there's some history
        st.session_state.gemini_analysis_result = asyncio.run(call_gemini_analysis(oracle.history))
    else:
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Gemini ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")

if st.session_state.gemini_analysis_result:
    st.markdown(st.session_state.gemini_analysis_result)

